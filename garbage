function noDrag(event,s){
    console.log(event.type);
    $("#text_holder").draggable("destroy");
    //$("#text_holder").resizable("destroy");
    editor.subscribe("editableKeydown", function(data,element){
        
        console.log('editable'+data.type);
    })
    editor.subscribe("editableDrag", function(data,element){

        console.log(data.type);
    })
}
function Drag(event, s){
    console.log(event.type);
    $("#text_holder").draggable();
    //$("#text_holder").resizable();
}





<p class="editable"></p>



resize:both; 




$("#main").on("select",function(event){
    if(event.target.type=="text"){
        
        
    }

});




<input list="fontsize" id="Fsize_button">
            <datalist id="fontsize">
                <option value=12>
                <option value=14>
                <option value=16>
                <option value=18>
                <option value=20>
            </datalist>




            $('div').on('focus',function(event){
    if(this.attr('contentEditable')==true){
        var Id=event.target.id;
        $(Id).on("select",function(){
            selection=getSelection(event);
        })
    }
});





var Div=$('div[contenteditable="true"]');
console.log(Div);
Div.each(function(index,element) {
    $(element).on("mouseup keyup", function(){
        getSelection();

        console.log("eventlistener  "+select.toString());
    })
});






/*var new_select=document.getSelection();
        new_select.removeAllRanges();
        new_select.addRange(range);*/







medium-editor


var editor = new MediumEditor('.editable', {
    toolbar: {
        /* These are the default options for the toolbar,
           if nothing is passed this is what is used */
        allowMultiParagraphSelection: false,
        diffLeft: 0,
        diffTop: -10,
        firstButtonClass: 'medium-editor-button-first',
        lastButtonClass: 'medium-editor-button-last',
        relativeContainer: null,
        standardizeSelectionStart: false,
        static: false,
        /* options which only apply when static is true */
        align: 'center',
        sticky: false,
        updateOnEmptySelection: false,
        buttons: [
            'bold',
            'italic',
            'underline',
            {
                name: 'h1',
                action: 'append-h2',
                aria: 'header type 1',
                tagNames: ['h2'],
                contentDefault: '<b>H1</b>',
                classList: ['custom-class-h1'],
                attrs: {
                    'data-custom-attr': 'attr-value-h1'
                }
            },
            {
                name: 'h2',
                action: 'append-h3',
                aria: 'header type 2',
                tagNames: ['h3'],
                contentDefault: '<b>H2</b>',
                classList: ['custom-class-h2'],
                attrs: {
                    'data-custom-attr': 'attr-value-h2'
                }
            },
            'quote',
            'fontsize',
            'fontname',
            'fontcolor',
            'colorPicker'
        ]
    },
    anchor:{
        /* These are the default options for anchor form,
           if nothing is passed this is what it used */
        customClassOption:'naman',
        customClassOptionText: 'Button',
        linkValidation: false,
        placeholderText: 'Paste or type a link',
        targetCheckbox: false,
        targetCheckboxText: 'Open in new window'
    },
    anchorPreview: {
        /* These are the default options for anchor preview,
           if nothing is passed this is what it used */
        hideDelay: 500,
        previewValueSelector: 'a'
    },
    paste: {
        /* This example includes the default options for paste,
           if nothing is passed this is what it used */
        forcePlainText: true,
        cleanPastedHTML: false,
        cleanReplacements: [],
        cleanAttrs: ['class', 'style', 'dir'],
        cleanTags: ['meta'],
        unwrapTags: []
    },
    keyboardCommands: {
        /* This example includes the default options for keyboardCommands,
           if nothing is passed this is what it used */
        commands: [
            {
                command: 'bold',
                key: 'B',
                meta: true,
                shift: false,
                alt: false
            },
            {
                command: 'italic',
                key: 'I',
                meta: true,
                shift: false,
                alt: false
            },
            {
                command: 'underline',
                key: 'U',
                meta: true,
                shift: false,
                alt: false
            }
        ],
    },
    autolink:true,
    imageDragging: false
    
});






$('.menuListSize').removeClass('visible');
  $('.menuListSize').addClass('invisible');
  $('.menuSize').removeClass('visible');
  $('.menuSize').addClass('invisible');
  $('.size-button').removeClass('visible');
  $('.size-button').addClass('invisible');






  if($('.menuListSize,.menuSize,.size-button').hasClass('visible')){
      console.log("hello world!!")
    $('.menuListSize,.menuSize,.size-button').removeClass('visible');
    $('.menuListSize,.menuSize,.size-button').addClass('invisible');
  }






  css styles for toolbar and widget bar

  #toolbar{
    width: 100%;
    height:30px;
    padding: 1px;
    background-color: rgb(199, 240, 242);
}
#widgetbar{
    width: 100%;
    height:30px;
    padding: 1px;
    background-color: rgb(199, 240, 242);
}

.tool_button{
    background-color: rgb(199, 240, 242);
    width: 30px;
    height: 30px;
    border-style: outset;
    text-align: center;
    text-decoration: none;
    font-size:16px;

}

.tool_button_size{
    background-color: rgb(199, 240, 242);
    width: 100px;
    height: 30px;
    border-style: outset;
    text-align: left;
    text-decoration: none;
    font-size:16px;

}
.tool_button_style{
    background-color: rgb(199, 240, 242);
    width: 200px;
    height: 30px;
    border-style: outset;
    text-align: left;
    text-decoration: none;
    font-size:16px;

}






function dragging(event){
    translateX=event.clientX-initial_X;
    console.log(document.getElementById(event.target.id).offsetLeft);
    console.log(translateX);
    //resizer_array[7].style.left=document.
    //var d_el=document.getElementById(event.target.id);
    //resizer_array[1].style.top=event.clientY; (parseInt(resizer_array[7].style.left.substring(0,resizer_array[7].style.left.length-2))+translateX)+'px';
}




//resizer.style.width=el.style.width;
        //resizer.style.height=el.style.height;
        //resizer.style.top=el.style.top;
        //resizer.style.left=el.style.left;



        //document.getElementById('main').removeChild(resizer);
        //document.getElementById(active_page_id).appendChild(resizer);


//$(resizer).removeClass('resizer_off');
    //$(resizer).addClass('resizer_on');



//$(resizer).removeClass('resizer_on');
        //$(resizer).addClass('resizer_off')






//var resizer=document.getElementById('resizer');









<div id="c_1" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: nw-resize"></div>
<div id="c_2" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: n-resize"></div>
<div id="c_3" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: ne-resize"></div>
<div id="c_4" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: e-resize"></div>
<div id="c_5" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: se-resize"></div>
<div id="c_6" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: s-resize"></div>
<div id="c_7" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: sw-resize"></div>
<div id="c_8" class="c_resize resizer_off" draggable="true"  ondragstart="drag(event)" style="cursor: w-resize"></div>














resizer_array[2].style.left=parseInt(resizer_array[2].style.left.substring(0,resizer_array[2].style.left.length-2))+$(parent_el).width()-init_width+'px';
resizer_array[4].style.left=parseInt(resizer_array[4].style.left.substring(0,resizer_array[4].style.left.length-2))+$(parent_el).width()-init_width+'px';
resizer_array[4].style.top=parseInt(resizer_array[4].style.top.substring(0,resizer_array[4].style.top.length-2))+$(parent_el).height()-init_height+'px';
resizer_array[6].style.top=parseInt(resizer_array[6].style.top.substring(0,resizer_array[6].style.top.length-2))+$(parent_el).height()-init_height+'px';











event.dataTransfer.setData(drag_id,
        (parseInt(style.getPropertyValue("left"), 10) - event.pageX) + ',' + (parseInt(style.getPropertyValue("top"), 10) - event.pageY) + ',' + img_src);


















        <div id='holder'>
        <div id="box">
            <div id="handle"></div>
         </div>
        </div>
         <script>
                var box = document.getElementById('box');
                $(document).ready(function(){
                    $(box).css('top','200px');
                    $(box).css('left','200px');
                    console.log('hello world'+$(box).css('right'));
                })
                var resizeHandle = document.getElementById('handle');
                resizeHandle.addEventListener('mousedown', initialiseResize, false);
                
                function initialiseResize(e) {
                    window.addEventListener('mousemove', startResizing, false);
                       window.addEventListener('mouseup', stopResizing, false);
                }
                
                function startResizing(e) {
                   offsetRight=$(window).width()-($(box).offset().left+$(box).outerWidth());
                   offsetBottom=$(window).height()-($(box).offset().top+$(box).outerHeight());
                   $(box).css('bottom',$(box).css('bottom'));
                   $(box).css('right',$(box).css('right'));
                   $(box).css('top','');
                   $(box).css('left','');
                   console.log(box);
                   box.style.width = (($(window).width()-e.clientX) - offsetRight) + 'px';
                   box.style.height = (($(window).height()-e.clientY) - offsetBottom) + 'px';
                   //console.log(e.clientX - offsetRight);
                }
                function stopResizing(e) {
                    window.removeEventListener('mousemove', startResizing, false);
                    window.removeEventListener('mouseup', stopResizing, false);
                } 
                </script>











                <style>
    #holder{
        position: absolute;
        border-style: dashed;
        width: 1000px;
        height: 1000px;
        
    }
#box {
    position: absolute;
    width: 130px;
    height: 130px;
    background-color: #2196F3;
    display:flex;
    align-items:center;
    
    
}

#handle {
    background-color: #727272;
    width: 10px;
    height: 10px;
    cursor: se-resize;
    position:absolute;
    top:-5px;
    left:-5px;
    
}
</style>









<script src="jquery-resizable.js"></script>

<link rel="stylesheet" href="style_color.css">



/*app.get('/index.html',function(req,res){
    console.log('__dirname is :'+__dirname);
    res.sendFile(__dirname+'/index.html');
    
})
app.get('/style.css',function(req,res){
    res.sendFile(__dirname+'/style.css');
})
app.get('/ebook_editor.js',function(req,res){
    res.sendFile(__dirname+'/ebook_editor.js');
})

//console.log('image file is :'+imageFile)

app.get(imageFile,function(req,res){
    console.log('fjdhskjfhkjsahf');
    res.set('Content-Type','image/jpeg');
    res.sendFile(__dirname+imageFile);
})*/


//app.get('/images')
/*http.createServer(function(req,res){


    var contentType='text/html';
    var filename=req.url.toString().substring(1);

    if(req.url.toString().includes('.css'))
        contentType='text/css';
    if(req.url.toString().includes('.js'))
        contentType='text/javascript'; 
    if(req.url.toString().includes('.ico'))
        contentType='image/x-icon';
    if(req.url==filename){


        contentType='image';
    }
    fs.readFile(filename,function(err,data){

        console.log(filename+'jhfldsajflk')
        if(err)throw err;
        
        res.writeHead(200,{'Content-Type':contentType});
        res.write(data);
        res.end();
    });
}).listen(8000);*/




//app.use(fileUpload());
//app.use(bodyParser.urlencoded({extended:true}));

/**/